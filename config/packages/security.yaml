security:
  enable_authenticator_manager: true
  password_hashers:
    App\Entity\User: "auto"
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: "auto"
      cost: 15
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login_check
        username_path: email
        password_path: password
        success_handler: App\Controller\Security\AuthenticationSuccessHandler
        failure_handler: App\Controller\Security\AuthenticationFailureHandler

    api:
      pattern: ^/api
      stateless: true
      jwt: ~
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider

  access_control:
    - { path: ^/api/register, roles: PUBLIC_ACCESS }
    - { path: ^/api/verify/email, roles: PUBLIC_ACCESS }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/login-google, roles: PUBLIC_ACCESS }
    - { path: ^/api/instalaciones/all, roles: [ ROLE_VERIFIED, ROLE_ADMIN ] }
    - { path: ^/api/instalaciones/edit, roles: ROLE_ADMIN }
    - { path: ^/api/instalaciones/delete, roles: ROLE_ADMIN }
    - { path: ^/api/instalaciones/new, roles: ROLE_ADMIN }
    - { path: ^/api, roles: [ ROLE_VERIFIED, ROLE_ADMIN ] }

# TODO:
# - Es mejor que el login esté restringido para ROLE_VERIFIED y que solo cuadno se verifiquen entonces puedan hacer login? O que al menos dejen hacer login, y ya dentro del controlador entonces ver si no está verificado que devuelva un JSON diciendo que tiene que verificarse